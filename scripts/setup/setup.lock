const readline = require("readline");
const fs = require("fs");
const bcrypt = require("bcrypt");
const mongoose = require("mongoose");
const path = require("path");

// Utility for dsecure prompts
const prompt = (question, isPassword = false) => {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: true,
  });

  if (isPassword) rl.write("\x1B[?25l"); // hide cursor for passwrod
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      if (isPassword) rl.write("\x1B[?25h\n"); // Show cursor again
      resolve(answer);
    });
  });
};

const runSetup = async () => {
  console.log("Welcome to the Setup Wizard!");

  // Step 1: Gather inputs
  const dbUrl = await prompt("Enter Database URL: ");
  // const appName = await prompt("Enter App Name: ");
  // const adminEmail = await prompt("Enter Admin email: ");
  // const adminPassword = await prompt("Enter Admin password: ", true);

  console.log("\nValidating inputs...\n");

  // Step 2: Validate inputs
  if (!dbUrl /*|| !appName || !adminEmail || !adminPassword*/) {
    console.error("All fields are required. Please restart the setup.");
    process.exit(1);
  }
  // Step 3: Validate database
  const isDbValid = await validateDatabase(dbUrl);
  if (!isDbValid) {
    process.exit(1);
  }

  // Step 4: Hash password
  // const salt = await bcrypt.genSalt(10);
  // const hashPassword = await bcrypt.hash(adminPassword, salt);

  // Step 5: Write Configuration
  updateEnvFile({
    DATABASE_URL: `"${String(dbUrl).replace(/"/g, '\\"')}"`,
    SETUP_COMPLETE: true,
  });

  // Step 6: Finalize, Prevent running the setup again by locking it
  fs.renameSync("scripts/setup/setup.cjs", "scripts/setup/setup.lock");
  console.log("Setup complete! You can now start your app.");
  process.exit(1);
};

const envFilePath = path.join(__dirname, "../../.env");

const updateEnvFile = (newEnvVars) => {
  try {
    let existingContent = "";

    // Read existing .env file it exists
    if (fs.existsSync(envFilePath)) {
      existingContent = fs.readFileSync(envFilePath, "utf8");
    }

    // Parse existing variables
    const existingVars = existingContent
      .split("\n")
      .filter((line) => line.trim() && !line.startsWith("#"))
      .reduce((acc, line) => {
        const [key, value] = line.split("=");
        acc[key] = value;
        return acc;
      }, {});

    // Merge new variables
    const mergedVars = { ...existingVars, ...newEnvVars };

    // Build updated content
    const updatedContent = Object.entries(mergedVars)
      .map(([key, value]) => `${key}=${value}`)
      .join("\n");

    // Write back to .env file
    fs.writeFileSync(envFilePath, updatedContent, "utf8");

    // Append the content
    console.log("Configuration saved to .env file.");
  } catch (error) {
    console.error("Failed to update .env file:", error.message);
    process.exit(1);
  }
};

const validateDatabase = async (dbUrl) => {
  console.log("Validating database connection...");

  try {
    if (!mongoose.connection.readyState) {
      await mongoose.connect(dbUrl);
      console.log("Successfully connected to the database");
    }
    // await mongoose.disconnect();
    return true;
  } catch (error) {
    console.error("Database connection failed:", error.message);

    return false;
  }
};

runSetup();
