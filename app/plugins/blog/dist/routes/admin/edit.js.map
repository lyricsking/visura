{
  "version": 3,
  "sources": ["../../../src/routes/admin/edit.tsx"],
  "sourcesContent": ["import { useEffect, useRef } from \"react\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport Button from \"~/shared/components/button\";\r\nimport { ImagePreview } from \"~/shared/components/image-preview\";\r\nimport { Input } from \"~/shared/components/input\";\r\nimport { MarkdownEditor } from \"~/shared/components/editor/markdown-editor\";\r\nimport { Textarea } from \"~/shared/components/textarea\";\r\nimport { ValidationMessage } from \"~/shared/components/ui/validation-message\";\r\nimport { useFileUpload } from \"~/shared/hooks/use-upload\";\r\nimport { cn } from \"~/shared/utils/util\";\r\nimport { useToast } from \"~/shared/hooks/use-toast\";\r\n\r\nexport default function PostForm() {\r\n  // const loaderData = useLoaderData<typeof loader>();\r\n\r\n  const editorRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  let fetcher = useFetcher({ key: \"submit-post\" });\r\n\r\n  let { submit: uploadImage, isUploading, images } = useFileUpload();\r\n\r\n  let data: any = fetcher.data;\r\n  let title =\r\n    data?.values?.title || fetcher.formData?.get(\"title\")?.toString() || \"\";\r\n  let content =\r\n    data?.values?.content ||\r\n    fetcher.formData?.get(\"content\")?.toString() ||\r\n    editorRef.current?.value;\r\n  let excerpt =\r\n    data?.values?.excerpt || fetcher.formData?.get(\"excerpt\")?.toString() || \"\";\r\n  let tags =\r\n    (data?.values?.tags || fetcher.formData?.get(\"tags\"))\r\n      ?.toString()\r\n      .split(\", \") || [];\r\n\r\n  const isSubmitting = fetcher.state !== \"idle\";\r\n\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (!isUploading && images && images.length > 0) {\r\n      // Set featuredImage to the first image in the images array\r\n      images.forEach((image) => {\r\n        if (!image.url.startsWith(\"blob:\"))\r\n          fetcher.formData?.set(\"featuredImage\", image.url);\r\n      });\r\n    }\r\n  }, [images, isUploading]);\r\n\r\n  useEffect(() => {\r\n    if (data?.post) {\r\n      // Todo Show toast\r\n      toast({ description: \"Post created.\" });\r\n      // Todo Reset form and navigate\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"w-full grid gap-4 p-4\">\r\n      <fetcher.Form method=\"post\">\r\n        <fieldset disabled={isSubmitting}>\r\n          <div className=\"grid gap-4 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-2 xl:grid-cols-4\">\r\n            <div className=\"md:cols-span-2 lg:col-span-1 xl:col-span-2\">\r\n              <label htmlFor=\"title\">Title</label>\r\n              <Input\r\n                id=\"title\"\r\n                type=\"text\"\r\n                name=\"title\"\r\n                defaultValue={title || \"\"}\r\n                required\r\n                className={cn(data?.errors?.title ? \"border-red-400\" : \"\")}\r\n              />\r\n              {data?.errors?.title ? (\r\n                <ValidationMessage\r\n                  isSubmitting={isSubmitting}\r\n                  error={data?.errors?.title}\r\n                />\r\n              ) : null}\r\n            </div>\r\n\r\n            <div className=\"md:cols-span-2 lg:col-span-1 xl:col-span-2\">\r\n              <label htmlFor=\"tags\">Tags (comma separated)</label>\r\n              <Input\r\n                id=\"tags\"\r\n                type=\"text\"\r\n                name=\"tags\"\r\n                defaultValue={tags?.join(\", \") || \"\"}\r\n                required\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-span-full\">\r\n              <label\r\n                htmlFor=\"featuredImage\"\r\n                className={data?.errors?.featuredImage ? \"border-red-400\" : \"\"}\r\n              >\r\n                {isUploading ? (\r\n                  <p>Uploading Image...</p>\r\n                ) : (\r\n                  <p>Select featured Image</p>\r\n                )}\r\n              </label>\r\n              <Input\r\n                id=\"featuredImage\"\r\n                type=\"file\"\r\n                name=\"featuredImage\"\r\n                style={{ display: \"none\" }}\r\n                onChange={(e) => uploadImage(e.currentTarget.files)}\r\n              />\r\n              {data?.errors?.featuredImage ? (\r\n                <ValidationMessage\r\n                  isSubmitting={isSubmitting}\r\n                  error={data?.errors?.featuredImage}\r\n                />\r\n              ) : null}\r\n              <div>\r\n                {/*\r\n                 * Here we render the images including the one we are\r\n                 * uploading and the ones we've already  uploaded\r\n                 */}\r\n                {images.map((file) => {\r\n                  return (\r\n                    <ImagePreview\r\n                      key={file.name}\r\n                      name={file.name}\r\n                      url={file.url}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-span-full \">\r\n              <label htmlFor=\"excerpt\">Excerpt</label>\r\n              <Textarea\r\n                id=\"excerpt\"\r\n                name=\"excerpt\"\r\n                defaultValue={excerpt || \"\"}\r\n                required\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-span-full\">\r\n              <label htmlFor=\"content\">Content</label>\r\n              <MarkdownEditor\r\n                editorRef={editorRef}\r\n                name=\"content\"\r\n                defaultValue={content || \"\"}\r\n                required\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"lg\"\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n              >\r\n                {isSubmitting ? \"Submitting\" : \"Save Post\"}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </fetcher.Form>\r\n    </div>\r\n  );\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_react", "Button"]
}
