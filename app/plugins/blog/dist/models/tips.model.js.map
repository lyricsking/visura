{
  "version": 3,
  "sources": ["../../src/models/tips.model.ts"],
  "sourcesContent": ["import mongoose, {\r\n  Schema,\r\n  model,\r\n  Types,\r\n  Model,\r\n  HydratedDocument,\r\n} from \"mongoose\";\r\nimport { ITips, IPrediction, PredictionType } from \"../types/tips.type\";\r\nimport { LeagueModel } from \"./league.model\";\r\n\r\nexport type TipsModelType = Model<ITips>;\r\n\r\n// Define the schema for IPrediction\r\nconst predictionSchema = new Schema<IPrediction>(\r\n  {\r\n    [PredictionType.outcome]: {\r\n      value: { type: String, required: true },\r\n      reason: { type: String, required: true },\r\n    },\r\n    [PredictionType.scoreline]: {\r\n      value: { type: String, required: true },\r\n      reason: { type: String, required: true },\r\n    },\r\n  },\r\n  { _id: false } // Disable _id for subdocument schema\r\n);\r\n\r\n// Define the schema for the Tips model\r\nconst tipsSchema = new Schema<ITips, TipsModelType>(\r\n  {\r\n    slug: { type: String, unique: true },\r\n    teamA: { type: String, required: true },\r\n    teamB: { type: String, required: true },\r\n    matchDate: { type: Date, required: true },\r\n    leagueCountry: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"LeagueCountry\",\r\n      required: true,\r\n    },\r\n    league: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"League\",\r\n      required: true,\r\n      /* validate: {\r\n        validator: async function (league) {\r\n          const mLeague = await LeagueModel.findById(league);\r\n          if (!mLeague) {\r\n            throw new Error(\"League not found\");\r\n          }\r\n\r\n          // Check if the League belongs to the selected country\r\n          return mLeague.country.equals(this.leagueCountry);\r\n        },\r\n        message: \"Invalid league for the selected country.\",\r\n      },\r\n    */\r\n    },\r\n    teamARank: { type: Number, required: true },\r\n    teamBRank: { type: Number, required: true },\r\n    author: { type: Schema.Types.ObjectId, ref: \"User\", required: true },\r\n    prediction: {\r\n      type: predictionSchema,\r\n      required: true,\r\n    },\r\n    introduction: { type: String, required: true },\r\n    excerpt: { type: String, required: true },\r\n    featuredImage: { type: String, required: true },\r\n    tags: { type: [String], required: true },\r\n    publishedOn: { type: Date },\r\n  },\r\n  {\r\n    timestamps: true, // Automatically manage createdAt and updatedAt fields\r\n  }\r\n);\r\n\r\nexport type HydratedTips = HydratedDocument<ITips>;\r\n// Create the Tips model\r\nconst TipsModel: TipsModelType =\r\n  mongoose.models.Tips || model(\"Tips\", tipsSchema);\r\n\r\nexport default TipsModel;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMO;AACP,kBAAmD;AAMnD,MAAM,mBAAmB,IAAI;AAAA,EAC3B;AAAA,IACE,CAAC,2BAAe,OAAO,GAAG;AAAA,MACxB,OAAO,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,MACtC,QAAQ,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACzC;AAAA,IACA,CAAC,2BAAe,SAAS,GAAG;AAAA,MAC1B,OAAO,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,MACtC,QAAQ,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACzC;AAAA,EACF;AAAA,EACA,EAAE,KAAK,MAAM;AAAA;AACf;AAGA,MAAM,aAAa,IAAI;AAAA,EACrB;AAAA,IACE,MAAM,EAAE,MAAM,QAAQ,QAAQ,KAAK;AAAA,IACnC,OAAO,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACtC,OAAO,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACtC,WAAW,EAAE,MAAM,MAAM,UAAU,KAAK;AAAA,IACxC,eAAe;AAAA,MACb,MAAM,uBAAO,MAAM;AAAA,MACnB,KAAK;AAAA,MACL,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM,uBAAO,MAAM;AAAA,MACnB,KAAK;AAAA,MACL,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcZ;AAAA,IACA,WAAW,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC1C,WAAW,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC1C,QAAQ,EAAE,MAAM,uBAAO,MAAM,UAAU,KAAK,QAAQ,UAAU,KAAK;AAAA,IACnE,YAAY;AAAA,MACV,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,cAAc,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC7C,SAAS,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACxC,eAAe,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC9C,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,UAAU,KAAK;AAAA,IACvC,aAAa,EAAE,MAAM,KAAK;AAAA,EAC5B;AAAA,EACA;AAAA,IACE,YAAY;AAAA;AAAA,EACd;AACF;AAIA,MAAM,YACJ,gBAAAA,QAAS,OAAO,YAAQ,uBAAM,QAAQ,UAAU;AAElD,IAAO,qBAAQ;",
  "names": ["mongoose"]
}
