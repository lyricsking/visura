{
  "version": 3,
  "sources": ["../../src/models/post.model.ts"],
  "sourcesContent": ["import mongoose, { Schema, model, Types, Model } from \"mongoose\";\r\nimport { IPost } from \"../types/post.type\";\r\nimport { getSlug } from \"../utils/slug\";\r\n\r\nexport interface IPostMethods {\r\n  publish(): Promise<IPost>;\r\n}\r\n\r\nexport type PostModelType = Model<IPost, {}, IPostMethods>;\r\n\r\n// Define the schema for the News model\r\nconst postSchema = new Schema<IPost, PostModelType>(\r\n  {\r\n    title: { type: String, required: true },\r\n    slug: { type: String, unique: true },\r\n    author: { type: Schema.Types.ObjectId, ref: \"User\", required: true },\r\n    content: { type: String, required: true },\r\n    excerpt: { type: String, required: true },\r\n    featuredImage: { type: String, required: true },\r\n    tags: { type: [String], required: true },\r\n    published: { type: Boolean, default: false },\r\n    publishedOn: { type: Date },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now,\r\n    },\r\n    updatedAt: {\r\n      type: Date,\r\n      default: Date.now,\r\n    },\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\npostSchema.pre(\"save\", function (next) {\r\n  // If the title is not modified there's no need to generate new slug\r\n  if (this.isModified(\"title\")) {\r\n    // Only generate slug when the post is created or title modified.\r\n    this.slug = getSlug(this.title);\r\n  }\r\n  next();\r\n});\r\n\r\n// Middleware to update the `updatedAt` field on every save\r\npostSchema.pre(\"save\", function (next) {\r\n  this.updatedAt = new Date();\r\n  next();\r\n});\r\n\r\n// Instance method to check password validity\r\npostSchema.method(\"publish\", async function (): Promise<IPost> {\r\n  //  Only set published to true if the post is not currently published.\r\n  if (!this.published) {\r\n    this.published = true;\r\n    //  Set the `publishedOn` field to the current date if it's not\r\n    // already set, the field should only be set once.\r\n    if (!this.publishedOn) {\r\n      this.publishedOn = new Date();\r\n    }\r\n  }\r\n\r\n  return this.save();\r\n});\r\n\r\n// Create the Post model\r\nconst PostModel: PostModelType =\r\n  mongoose.models.Post || mongoose.model(\"Post\", postSchema);\r\n\r\nexport default PostModel;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAsD;AAEtD,kBAAwB;AASxB,MAAM,aAAa,IAAI;AAAA,EACrB;AAAA,IACE,OAAO,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACtC,MAAM,EAAE,MAAM,QAAQ,QAAQ,KAAK;AAAA,IACnC,QAAQ,EAAE,MAAM,uBAAO,MAAM,UAAU,KAAK,QAAQ,UAAU,KAAK;AAAA,IACnE,SAAS,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACxC,eAAe,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC9C,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,UAAU,KAAK;AAAA,IACvC,WAAW,EAAE,MAAM,SAAS,SAAS,MAAM;AAAA,IAC3C,aAAa,EAAE,MAAM,KAAK;AAAA,IAC1B,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS,KAAK;AAAA,IAChB;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS,KAAK;AAAA,IAChB;AAAA,EACF;AAAA,EACA;AAAA,IACE,QAAQ,EAAE,UAAU,KAAK;AAAA,IACzB,UAAU,EAAE,UAAU,KAAK;AAAA,EAC7B;AACF;AAEA,WAAW,IAAI,QAAQ,SAAU,MAAM;AAErC,MAAI,KAAK,WAAW,OAAO,GAAG;AAE5B,SAAK,WAAO,qBAAQ,KAAK,KAAK;AAAA,EAChC;AACA,OAAK;AACP,CAAC;AAGD,WAAW,IAAI,QAAQ,SAAU,MAAM;AACrC,OAAK,YAAY,oBAAI,KAAK;AAC1B,OAAK;AACP,CAAC;AAGD,WAAW,OAAO,WAAW,iBAAkC;AAE7D,MAAI,CAAC,KAAK,WAAW;AACnB,SAAK,YAAY;AAGjB,QAAI,CAAC,KAAK,aAAa;AACrB,WAAK,cAAc,oBAAI,KAAK;AAAA,IAC9B;AAAA,EACF;AAEA,SAAO,KAAK,KAAK;AACnB,CAAC;AAGD,MAAM,YACJ,gBAAAA,QAAS,OAAO,QAAQ,gBAAAA,QAAS,MAAM,QAAQ,UAAU;AAE3D,IAAO,qBAAQ;",
  "names": ["mongoose"]
}
