{
  "version": 3,
  "sources": ["../../src/server/post.server.ts"],
  "sourcesContent": ["import mongoose, { ObjectId, ValidatorFunction } from \"mongoose\";\r\nimport PostModel, { PostModelType } from \"../models/post.model\";\r\nimport { IPost } from \"../types/post.type\";\r\nimport { faker } from \"@faker-js/faker\";\r\nimport { DBReponse } from \"~/shared/utils/mongoose\";\r\n\r\nexport const createPost = async function (\r\n  data: Pick<\r\n    IPost,\r\n    | \"author\"\r\n    | \"title\"\r\n    | \"content\"\r\n    | \"excerpt\"\r\n    | \"featuredImage\"\r\n    | \"published\"\r\n    | \"tags\"\r\n  >\r\n): Promise<DBReponse<IPost>> {\r\n  let response: DBReponse<IPost> = {};\r\n\r\n  try {\r\n    response.data = await PostModel.create(data);\r\n  } catch (err: mongoose.Error.ValidationError | any) {\r\n    if (err instanceof mongoose.Error.ValidationError) {\r\n      response.error = err;\r\n    } else {\r\n      console.log(err);\r\n      throw err;\r\n    }\r\n  } finally {\r\n    return response;\r\n  }\r\n};\r\n\r\nexport const findPostById = async (id: string | ObjectId): Promise<any> => {\r\n  try {\r\n    const post = await PostModel.findById(id).exec();\r\n\r\n    return post;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const findPosts = async (fields: Partial<IPost>): Promise<IPost[]> => {\r\n  try {\r\n    const posts = await PostModel.find(fields).exec();\r\n\r\n    return posts;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const publishPost = async (\r\n  id: string | ObjectId\r\n): Promise<DBReponse<IPost>> => {\r\n  let response: DBReponse<IPost> = {};\r\n  try {\r\n    response.data = await PostModel.findById(id)\r\n      .exec()\r\n      .then((post) => post?.publish());\r\n  } catch (err: mongoose.Error.ValidationError | any) {\r\n    if (err instanceof mongoose.Error.ValidationError) {\r\n      response.error = err;\r\n    } else {\r\n      console.log(err);\r\n      throw err;\r\n    }\r\n  } finally {\r\n    return response;\r\n  }\r\n};\r\n\r\ntype FindPostBySlugType = {\r\n  slug: IPost[\"slug\"];\r\n};\r\n\r\nexport const findPostBySlug = async ({\r\n  slug,\r\n}: FindPostBySlugType): Promise<IPost | null> => {\r\n  try {\r\n    const post = await PostModel.findOne({ slug }).exec();\r\n\r\n    return post;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const generateDummyPosts = async (\r\n  count: number = 5\r\n): Promise<boolean> => {\r\n  PostModel.deleteMany();\r\n  let postCount = 0;\r\n  for (let i = 0; i < count; i++) {\r\n    await createPost({\r\n      title: faker.lorem.sentence(),\r\n      author: new mongoose.Types.ObjectId(), // Dummy ObjectId for the author\r\n      content: faker.lorem.paragraphs(5, \"\\n\\n\"),\r\n      excerpt: faker.lorem.paragraph(2),\r\n      featuredImage: faker.image.urlLoremFlickr({ category: \"sport\" }),\r\n      tags: faker.helpers.arrayElements(\r\n        [\"tech\", \"news\", \"blogging\", \"coding\", \"health\"],\r\n        3\r\n      ), // Choose random tags\r\n      published: faker.datatype.boolean(),\r\n    });\r\n\r\n    postCount++;\r\n  }\r\n\r\n  return count === postCount;\r\n};\r\n\r\n//const dummyPosts = generateDummyPosts(10);\r\n//console.log(dummyPosts);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAsD;AACtD,kBAAyC;AAEzC,mBAAsB;AAGf,MAAM,aAAa,eACxB,MAU2B;AAC3B,MAAI,WAA6B,CAAC;AAElC,MAAI;AACF,aAAS,OAAO,MAAM,YAAAA,QAAU,OAAO,IAAI;AAAA,EAC7C,SAAS,KAA2C;AAClD,QAAI,eAAe,gBAAAC,QAAS,MAAM,iBAAiB;AACjD,eAAS,QAAQ;AAAA,IACnB,OAAO;AACL,cAAQ,IAAI,GAAG;AACf,YAAM;AAAA,IACR;AAAA,EACF,UAAE;AACA,WAAO;AAAA,EACT;AACF;AAEO,MAAM,eAAe,OAAO,OAAwC;AACzE,MAAI;AACF,UAAM,OAAO,MAAM,YAAAD,QAAU,SAAS,EAAE,EAAE,KAAK;AAE/C,WAAO;AAAA,EACT,SAAS,OAAO;AACd,UAAM;AAAA,EACR;AACF;AAEO,MAAM,YAAY,OAAO,WAA6C;AAC3E,MAAI;AACF,UAAM,QAAQ,MAAM,YAAAA,QAAU,KAAK,MAAM,EAAE,KAAK;AAEhD,WAAO;AAAA,EACT,SAAS,OAAO;AACd,UAAM;AAAA,EACR;AACF;AAEO,MAAM,cAAc,OACzB,OAC8B;AAC9B,MAAI,WAA6B,CAAC;AAClC,MAAI;AACF,aAAS,OAAO,MAAM,YAAAA,QAAU,SAAS,EAAE,EACxC,KAAK,EACL,KAAK,CAAC,SAAS,MAAM,QAAQ,CAAC;AAAA,EACnC,SAAS,KAA2C;AAClD,QAAI,eAAe,gBAAAC,QAAS,MAAM,iBAAiB;AACjD,eAAS,QAAQ;AAAA,IACnB,OAAO;AACL,cAAQ,IAAI,GAAG;AACf,YAAM;AAAA,IACR;AAAA,EACF,UAAE;AACA,WAAO;AAAA,EACT;AACF;AAMO,MAAM,iBAAiB,OAAO;AAAA,EACnC;AACF,MAAiD;AAC/C,MAAI;AACF,UAAM,OAAO,MAAM,YAAAD,QAAU,QAAQ,EAAE,KAAK,CAAC,EAAE,KAAK;AAEpD,WAAO;AAAA,EACT,SAAS,OAAO;AACd,UAAM;AAAA,EACR;AACF;AAEO,MAAM,qBAAqB,OAChC,QAAgB,MACK;AACrB,cAAAA,QAAU,WAAW;AACrB,MAAI,YAAY;AAChB,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,UAAM,WAAW;AAAA,MACf,OAAO,mBAAM,MAAM,SAAS;AAAA,MAC5B,QAAQ,IAAI,gBAAAC,QAAS,MAAM,SAAS;AAAA;AAAA,MACpC,SAAS,mBAAM,MAAM,WAAW,GAAG,MAAM;AAAA,MACzC,SAAS,mBAAM,MAAM,UAAU,CAAC;AAAA,MAChC,eAAe,mBAAM,MAAM,eAAe,EAAE,UAAU,QAAQ,CAAC;AAAA,MAC/D,MAAM,mBAAM,QAAQ;AAAA,QAClB,CAAC,QAAQ,QAAQ,YAAY,UAAU,QAAQ;AAAA,QAC/C;AAAA,MACF;AAAA;AAAA,MACA,WAAW,mBAAM,SAAS,QAAQ;AAAA,IACpC,CAAC;AAED;AAAA,EACF;AAEA,SAAO,UAAU;AACnB;",
  "names": ["PostModel", "mongoose"]
}
